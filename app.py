import streamlit as st
import tensorflow as tf
import torch
import numpy as np
import cv2
from utilitaires import *
from detection_classification import *
import tempfile # pour la mise en RAM

###################
# INITIALISATIONS #
###################
fichier_photo = None
fichier_video = None
choix_option = None
roi_cropped = None
streamlit_slider_confidence = None

# IMPORT DES MODELES (v√©rification s'ils sont en cl√©s de session streamlit pour ne pas les refresh √† chaque action de l'utilisateur)
#importer le mod√®le de d√©tection, le mod√®le est pris sur le git de yolo, les poids pour les portes dans le path local
if 'modele_yolo' not in st.session_state:
    st.session_state['modele_yolo'] = torch.hub.load('ultralytics/yolov5', 'custom', path='modele_detection/best.pt', force_reload=True)
#importer le mod√®le de classification
if 'modele_classif' not in st.session_state:
    st.session_state['modele_classif'] = tf.keras.models.load_model('.\\modele_classif')

st.set_page_config(page_title="Vid√©osurveillance des portes") # texte affich√© dans l'onglet
st.title("Vid√©osurveillance des portes üö™", anchor=None) # titre en haut de la page

st.write("""
Cette interface repose sur un pipeline IA qui peut d√©tecter une porte sur une image, une vid√©o ou un flux webcam et classer
la porte selon trois classes : ouverte, ferm√©e et entrouverte.
""")

choix_option = st.selectbox(
        'Veuillez choisir une option :',
        ('Pr√©diction sur photo', 'Pr√©diction sur vid√©o', 'Pr√©diction sur webcam'))

#########
# PHOTO #
#########

if choix_option == 'Pr√©diction sur photo':

    st.write("Pr√©diction sur photo :")
    fichier_photo = st.file_uploader("Veuillez choisir une image.", type='png')
    #les fichiers upload√©s sont restitu√©s sous forme de buffers qu'il faut lire pour les utiliser dans nos fonctions

    # Si une photo est upload√©e :
    if fichier_photo is not None:
        # On lit le buffer :
        fichier_photo_bytes = fichier_photo.read()

        # Passag de l'image en array numpy :
        fichier_photo_bytes = np.asarray(bytearray(fichier_photo_bytes), dtype=np.uint8)
        img = cv2.imdecode(fichier_photo_bytes, cv2.IMREAD_COLOR) 
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # correction de l'inversion RGB

        img = np.asarray(img)

        streamlit_slider_confidence = st.slider(label="Seuil de d√©tection :",
                                                min_value=0.0,
                                                max_value=1.0,
                                                value=0.5,
                                                step=0.01)

        # Pr√©diction par le mod√®le de d√©tection sur l'image upload√©e :
        roi_cropped, img = detec_et_classif_image(modele_detection=st.session_state['modele_yolo'],
                                           modele_classif=st.session_state['modele_classif'],
                                           image=img,
                                           seuil_confiance=streamlit_slider_confidence)
        st.image(img)

#########
# VIDEO #
#########

if choix_option == 'Pr√©diction sur vid√©o':
    st.write("Pr√©diction sur vid√©o :")
    #Widget de t√©l√©versement de vid√©o pour la classif sur vid√©o :
    fichier_video = st.file_uploader("Veuillez choisir une vid√©o.", type='mov')

    # Si une vid√©o est upload√©e :
    if fichier_video is not None:    
        temp_video = tempfile.NamedTemporaryFile(delete=False)
        temp_video.write(fichier_video.read())
        cap = cv2.VideoCapture(temp_video.name)
        image_streamlit = st.empty()
        streamlit_slider_confidence = st.slider(label="Seuil de d√©tection :",
                                                min_value=0.0,
                                                max_value=1.0,
                                                value=0.5,
                                                step=0.01)

        streamlit_texte_pred = st.empty()
        while choix_option == 'Pr√©diction sur vid√©o':
            # D√©tection
            roi_cropped, frame = detec_et_classif_video(modele_detection=st.session_state['modele_yolo'],
                                                 modele_classif=st.session_state['modele_classif'],
                                                 capture_video=cap,
                                                 seuil_confiance=streamlit_slider_confidence)
            # Affichage de l'image avec d√©tection √©ventuelle :
            image_streamlit.image(frame)

##########
# WEBCAM #
##########

if choix_option == 'Pr√©diction sur webcam':
    #Widget de t√©l√©versement d'image pour la classif sur flux Webcam :
    st.write("Pr√©diction sur Webcam :")

    cap = cv2.VideoCapture(0)
    if cap.isOpened():
        streamlit_webcam = st.empty()
        streamlit_slider_confidence = st.slider(label="Seuil de d√©tection :",
                                                min_value=0.0,
                                                max_value=1.0,
                                                value=0.5,
                                                step=0.01)

        image_streamlit = st.empty()
        while choix_option == 'Pr√©diction sur webcam':
            # D√©tection
            roi_cropped, frame = detec_et_classif_video(modele_detection=st.session_state['modele_yolo'],
                                                        modele_classif=st.session_state['modele_classif'],
                                                        capture_video=cap,
                                                        seuil_confiance=streamlit_slider_confidence,
                                                        taille_texte=0.5,
                                                        epaisseur_texte=2,
                                                        largeur_bande=20,
                                                        offset_texte=10)

            # Affichage de l'image avec d√©tection √©ventuelle :
            image_streamlit.image(frame)